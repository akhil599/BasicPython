def met1(arr, x):    # Time complexity = O(n^2), Space complexity = O(1)
    c = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i]+arr[j] == x:
                c += 1
    return c

def hashtable(arr, x):     # Time complexity = O(n), Space complexity = O(n)
    ht = dict()
    for i in range(len(arr)):
        if arr[i] in ht:
            print(ht[arr[i]], arr[i], end= " is a pair whose sum is equal to desired number\n")
            return True
        else:
            ht[x-arr[i]] = arr[i]
    return False

def fastest(arr, x):      # Time complexity = O(n), Space complexity = O(1)
    arr1 = sorted(arr)
    i = 0
    j = len(arr1)-1
    while i<len(arr1) and j<len(arr1) and i>=0 and j>=0:
        print(i, arr1[i], j, arr1[j])
        if arr1[i]+arr1[j]==x:
            print(arr1[i], arr1[j], end=" is a required pair\n")
            return True
        else:
            if arr1[i]+arr1[j]<x:
                i += 1
            else:
                j = j - 1
    return False

a = [2, 0, 7, 4, -2, 9]
x = int(input("Enter the number whose sum pair you want to search"))
print("There are {} pairs in array whose sum equal to the given number\n".format(met1(a,x)))

print(hashtable(a, x))
print("\n")
print(fastest(a, x), end=" by fastest method")
